package com.dormhelios.view;

import java.awt.CardLayout;
import java.awt.event.ActionListener;
import javax.swing.JPanel;
import javax.swing.JButton;
import javax.swing.JScrollPane;
import java.awt.Color;
import java.awt.Font;
import java.awt.Cursor;
import javax.swing.SwingConstants;
import javax.swing.BorderFactory;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeSupport;

public class TenantDashboardView extends javax.swing.JFrame {

    /**
     * Creates new form MainDashboardView
     */
    public static final String DASHBOARD_PANEL = "DASHBOARD";

    private CardLayout cardLayout;
    private PropertyChangeSupport propertyChangeSupport;
    private TenantDashboardPanel tenantDashboardPanel; // Added tenant dashboard panel reference

    public TenantDashboardView() {
        // Initialize propertyChangeSupport before any other initialization
        this.propertyChangeSupport = new PropertyChangeSupport(this);
        initComponents();
        setLocationRelativeTo(null);
        setupComponents();
        applyCustomStyling();
        setExtendedState(javax.swing.JFrame.MAXIMIZED_BOTH);
    }

    // Add property change support methods
    public void addPropertyChangeListener(PropertyChangeListener listener) {
        // Check to ensure propertyChangeSupport is not null before using it
        if (propertyChangeSupport != null) {
            propertyChangeSupport.addPropertyChangeListener(listener);
        }
    }

    public void removePropertyChangeListener(PropertyChangeListener listener) {
        // Check to ensure propertyChangeSupport is not null before using it
        if (propertyChangeSupport != null) {
            propertyChangeSupport.removePropertyChangeListener(listener);
        }
    }

    public void firePropertyChange(String propertyName, Object oldValue, Object newValue) {
        // Check to ensure propertyChangeSupport is not null before using it
        if (propertyChangeSupport != null) {
            propertyChangeSupport.firePropertyChange(propertyName, oldValue, newValue);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")

    private void setupComponents() {
        cardLayout = new CardLayout();
        contentPanel.setLayout(cardLayout);
        
        // Initialize tenant dashboard panel and add it to content panel
        tenantDashboardPanel = new TenantDashboardPanel();
        contentPanel.add(tenantDashboardPanel, DASHBOARD_PANEL);
        cardLayout.show(contentPanel, DASHBOARD_PANEL);
    }

    /**
     * Applies Tailwind-inspired styling to the MainDashboard components.
     * Call this method after initComponents() in the constructor.
     */
    private void applyCustomStyling() {
        // Tailwind color palette
        Color white = new Color(255, 255, 255);       // white
        Color primary = new Color(59, 130, 246);      // blue-500 
        Color primaryLight = new Color(191, 219, 254); // blue-200
        Color primaryDark = new Color(37, 99, 235);   // blue-600
        Color secondary = new Color(79, 70, 229);     // indigo-600
        Color secondaryLight = new Color(224, 231, 255); // indigo-100
        Color bgLight = new Color(248, 250, 252);     // slate-50
        Color bgGray = new Color(243, 244, 246);      // gray-100
        Color slate100 = new Color(241, 245, 249);    // slate-100
        Color slate200 = new Color(226, 232, 240);    // slate-200
        Color slate700 = new Color(51, 65, 85);       // slate-700
        Color slate800 = new Color(30, 41, 59);       // slate-800
        Color slate900 = new Color(15, 23, 42);       // slate-900
        
        // Main window styling
        this.getContentPane().setBackground(bgLight);
        
        // Style the sidebar with a modern dark theme
        Color sidebarBg = new Color(30, 41, 59);      // slate-800
        Color sidebarHover = new Color(51, 65, 85);   // slate-700
        Color sidebarActive = new Color(71, 85, 105); // slate-600
        Color sidebarText = new Color(226, 232, 240); // slate-200
        Color sidebarAccent = new Color(56, 189, 248); // sky-400
        
        sidebarPanel.setBackground(sidebarBg);
        sidebarPanel.setBorder(BorderFactory.createMatteBorder(0, 0, 0, 1, new Color(30, 41, 59))); // More subtle border
        
        // Apply a stylish box shadow to the sidebar (using border as a workaround)
        sidebarPanel.setBorder(BorderFactory.createCompoundBorder(
                BorderFactory.createMatteBorder(0, 0, 0, 1, new Color(0, 0, 0, 30)),
                BorderFactory.createEmptyBorder(0, 0, 0, 0)
        ));
        
        // Style the content area
        contentPanel.setBackground(bgLight);
        contentPanel.setBorder(null); // Remove border
        jScrollPane1.setBorder(BorderFactory.createEmptyBorder());
        jScrollPane1.getViewport().setBackground(bgLight);
        
        // Style username display with a clean, modern look
        userInfoLabel.setForeground(white);
        userInfoLabel.setHorizontalAlignment(SwingConstants.CENTER);
        userInfoLabel.setFont(new Font("Segoe UI", Font.BOLD, 20));
        userInfoLabel.setBorder(BorderFactory.createCompoundBorder(
                BorderFactory.createMatteBorder(0, 0, 1, 0, new Color(51, 65, 85)), // slate-700
                BorderFactory.createEmptyBorder(20, 10, 20, 10)
        ));
        
        // Apply custom styling to dashboard button
        styleSidebarButton(dashboardButton, sidebarBg, sidebarHover, sidebarActive, sidebarText, sidebarAccent);
        
        // Apply icon or visual indicator to dashboard button for better UX
        dashboardButton.setIconTextGap(10);
        dashboardButton.setHorizontalAlignment(SwingConstants.LEFT);
        
        // Style logout button with a modern action button look
        logoutButton.setForeground(Color.WHITE);
        logoutButton.setBackground(new Color(244, 63, 94)); // rose-500
        logoutButton.setFont(new Font("Segoe UI", Font.BOLD, 14));
        logoutButton.setText("Logout");
        logoutButton.setBorder(BorderFactory.createCompoundBorder(
                BorderFactory.createLineBorder(new Color(225, 29, 72), 1), // rose-600
                BorderFactory.createEmptyBorder(8, 16, 8, 16)
        ));
        logoutButton.setFocusPainted(false);
        logoutButton.setCursor(new Cursor(Cursor.HAND_CURSOR));
        logoutButton.setContentAreaFilled(true);
        
        // Add hover effect to logout button
        logoutButton.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                logoutButton.setBackground(new Color(225, 29, 72)); // rose-600
            }
            
            @Override
            public void mouseExited(java.awt.event.MouseEvent evt) {
                logoutButton.setBackground(new Color(244, 63, 94)); // rose-500
            }
        });
    }

    /**
     * Helper method to style a sidebar button with Tailwind-inspired design
     * 
     * @param button The button to style
     * @param baseBg The base background color
     * @param hoverBg The hover background color
     * @param activeBg The active background color
     * @param textColor The text color
     * @param accentColor The accent color for selected state
     */
    private void styleSidebarButton(JButton button, Color baseBg, Color hoverBg, Color activeBg, Color textColor, Color accentColor) {
        button.setBackground(baseBg);
        button.setForeground(textColor);
        button.setFont(new Font("Segoe UI", Font.PLAIN, 16));
        button.setBorder(BorderFactory.createCompoundBorder(
                BorderFactory.createMatteBorder(0, 4, 0, 0, new Color(baseBg.getRed(), baseBg.getGreen(), baseBg.getBlue())),
                BorderFactory.createEmptyBorder(12, 16, 12, 16)
        ));
        button.setFocusPainted(false);
        button.setCursor(new Cursor(Cursor.HAND_CURSOR));
        button.setHorizontalAlignment(SwingConstants.LEFT);
        
        // Add hover and click effects
        button.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                if (!button.isSelected()) {
                    button.setBackground(hoverBg);
                    button.setBorder(BorderFactory.createCompoundBorder(
                            BorderFactory.createMatteBorder(0, 4, 0, 0, new Color(accentColor.getRed(), accentColor.getGreen(), accentColor.getBlue(), 150)),
                            BorderFactory.createEmptyBorder(12, 16, 12, 16)
                    ));
                }
            }
            
            @Override
            public void mouseExited(java.awt.event.MouseEvent evt) {
                if (!button.isSelected()) {
                    button.setBackground(baseBg);
                    button.setBorder(BorderFactory.createCompoundBorder(
                            BorderFactory.createMatteBorder(0, 4, 0, 0, baseBg),
                            BorderFactory.createEmptyBorder(12, 16, 12, 16)
                    ));
                }
            }
            
            @Override
            public void mousePressed(java.awt.event.MouseEvent evt) {
                button.setBackground(activeBg);
            }
            
            @Override
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                if (button.contains(evt.getPoint())) {
                    button.setBackground(hoverBg);
                } else {
                    button.setBackground(baseBg);
                }
            }
        });
    }

    /**
     * Displays the specified content panel in the main content area. Also
     * updates the highlighting on the sidebar buttons.
     *
     * @param panelName The unique String identifier of the panel to show.
     * @param selectedButton The sidebar JButton corresponding to the panel
     * being shown.
     */
    public void displayPanel(String panelName, JButton selectedButton) {
        cardLayout.show(contentPanel, panelName);
        highlightSidebarButton(selectedButton); // Update sidebar highlight
    }

    private void highlightSidebarButton(JButton selectedButton) {
        // Reset all sidebar buttons to default style
        Color sidebarBg = new Color(30, 41, 59);      // slate-800
        Color sidebarHover = new Color(51, 65, 85);   // slate-700
        Color sidebarText = new Color(226, 232, 240); // slate-200
        Color sidebarAccent = new Color(56, 189, 248); // sky-400
        
        JButton[] sidebarButtons = {dashboardButton};
        for (JButton btn : sidebarButtons) {
            if (btn != null) { // Check if button exists
                btn.setBackground(sidebarBg);
                btn.setForeground(sidebarText);
                btn.setBorder(BorderFactory.createCompoundBorder(
                        BorderFactory.createMatteBorder(0, 4, 0, 0, sidebarBg),
                        BorderFactory.createEmptyBorder(12, 16, 12, 16)
                ));
                btn.setOpaque(true);
            }
        }

        // Apply highlighted style to the selected button
        if (selectedButton != null) {
            selectedButton.setBackground(sidebarHover);
            selectedButton.setForeground(Color.WHITE);
            selectedButton.setBorder(BorderFactory.createCompoundBorder(
                    BorderFactory.createMatteBorder(0, 4, 0, 0, sidebarAccent),
                    BorderFactory.createEmptyBorder(12, 16, 12, 16)
            ));
        }
    }

    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        sidebarPanel = new javax.swing.JPanel();
        userInfoLabel = new javax.swing.JLabel();
        dashboardButton = new javax.swing.JButton();
        logoutButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        contentPanel = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Dashboard | DormHelios");

        sidebarPanel.setBackground(new java.awt.Color(255, 255, 255));
        sidebarPanel.setPreferredSize(new java.awt.Dimension(200, 704));

        userInfoLabel.setFont(new java.awt.Font("Segoe UI Semibold", 1, 24)); // NOI18N
        userInfoLabel.setText("Username");

        dashboardButton.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        dashboardButton.setText("Dashboard");
        dashboardButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        dashboardButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dashboardButtonActionPerformed(evt);
            }
        });

        logoutButton.setForeground(new java.awt.Color(51, 153, 255));
        logoutButton.setText("<html>\n<u>Logout</u>\n</html>");
        logoutButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        logoutButton.setBorderPainted(false);
        logoutButton.setContentAreaFilled(false);
        logoutButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        logoutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout sidebarPanelLayout = new javax.swing.GroupLayout(sidebarPanel);
        sidebarPanel.setLayout(sidebarPanelLayout);
        sidebarPanelLayout.setHorizontalGroup(
            sidebarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sidebarPanelLayout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addComponent(userInfoLabel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(sidebarPanelLayout.createSequentialGroup()
                .addGroup(sidebarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(dashboardButton, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(logoutButton, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        sidebarPanelLayout.setVerticalGroup(
            sidebarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sidebarPanelLayout.createSequentialGroup()
                .addGap(155, 155, 155)
                .addComponent(userInfoLabel)
                .addGap(18, 18, 18)
                .addComponent(dashboardButton, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 370, Short.MAX_VALUE)
                .addComponent(logoutButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        getContentPane().add(sidebarPanel, java.awt.BorderLayout.LINE_START);

        jScrollPane1.setPreferredSize(new java.awt.Dimension(1068, 900));

        contentPanel.setBackground(new java.awt.Color(250, 250, 250));
        contentPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        contentPanel.setPreferredSize(new java.awt.Dimension(1066, 950));

        javax.swing.GroupLayout contentPanelLayout = new javax.swing.GroupLayout(contentPanel);
        contentPanel.setLayout(contentPanelLayout);
        contentPanelLayout.setHorizontalGroup(
            contentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1064, Short.MAX_VALUE)
        );
        contentPanelLayout.setVerticalGroup(
            contentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 948, Short.MAX_VALUE)
        );

        jScrollPane1.setViewportView(contentPanel);

        getContentPane().add(jScrollPane1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Gets the tenant dashboard panel
     * 
     * @return The TenantDashboardPanel instance
     */
    public TenantDashboardPanel getTenantDashboardPanel() {
        return tenantDashboardPanel;
    }
    
    /**
     * Sets the action listener for the logout button
     * 
     * @param listener The action listener to add
     */
    public void setLogoutActionListener(ActionListener listener) {
        // Remove all existing action listeners first
        for (ActionListener al : logoutButton.getActionListeners()) {
            logoutButton.removeActionListener(al);
        }
        // Add the new listener
        logoutButton.addActionListener(listener);
    }
    
    /**
     * Closes the view (disposes the frame)
     */
    public void closeView() {
        setVisible(false);
        dispose();
    }

    /**
     * Sets the display name of the current user in the sidebar.
     * 
     * @param userName The user's display name
     */
    public void setUserDisplayName(String userName) {
        userInfoLabel.setText(userName);
    }

    public JButton getDashboardButton() {
        return dashboardButton;
    }

    public JScrollPane getJScrollPane() {
        return jScrollPane1;
    }

    public void addDashboardButtonListener(ActionListener listener) {
        dashboardButton.addActionListener(listener);
    }

    public void addContentPanel(JPanel panel, String panelName) {
        contentPanel.add(panel, panelName);
    }

    private void dashboardButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dashboardButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dashboardButtonActionPerformed

    private void logoutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_logoutButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TenantDashboardView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TenantDashboardView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TenantDashboardView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TenantDashboardView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TenantDashboardView().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel contentPanel;
    private javax.swing.JButton dashboardButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton logoutButton;
    private javax.swing.JPanel sidebarPanel;
    private javax.swing.JLabel userInfoLabel;
    // End of variables declaration//GEN-END:variables
}
