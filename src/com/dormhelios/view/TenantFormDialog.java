package com.dormhelios.view;

import com.dormhelios.model.entity.Guardian; // Needed for dropdowns
import com.dormhelios.model.entity.EmergencyContact; // Needed for dropdowns
import com.dormhelios.model.entity.Room; // Needed for dropdowns
import com.dormhelios.model.entity.Tenant; // To get/set data
import com.dormhelios.model.entity.User; // Needed for dropdowns
import java.awt.event.ActionListener;
import java.math.BigDecimal;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.List;
import java.util.Vector; // For ComboBox models
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;

public class TenantFormDialog extends javax.swing.JDialog {

    private Tenant currentTenant; // Store the tenant being edited (null if adding)
    private boolean saved = false; // Flag to indicate if save was clicked

    // Define a formatter for date fields (adjust pattern as needed)
    private static final DateTimeFormatter DATE_FORMATTER = DateTimeFormatter.ISO_LOCAL_DATE;

    public TenantFormDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        setupComponents();
    }

    private void setupComponents() {
        setLocationRelativeTo(getParent()); // Center relative to parent
        depositStatusComboBox.setModel(new DefaultComboBoxModel<>(Tenant.DepositStatus.values()));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    public void setupForAdd() {
        setTitle("Add New Tenant");
        saveButton.setText("Save Tenant"); // Or "Publish" as per wireframe
        currentTenant = null; // Ensure no existing tenant data is used
        clearForm();
    }

    public void setupForEdit(Tenant tenant) {
        setTitle("Edit Tenant: " + tenant.getFirstName() + " " + tenant.getLastName());
        saveButton.setText("Update Tenant");
        currentTenant = tenant;
        populateForm(tenant);
    }

    private void populateForm(Tenant tenant) {
        if (tenant == null) {
            clearForm();
            return;
        }
        firstNameField.setText(tenant.getFirstName());
        lastNameField.setText(tenant.getLastName());
        studentIdField.setText(tenant.getStudentIdNumber());
        emailField.setText(tenant.getEmail());
        phoneField.setText(tenant.getPhoneNumber());
        permanentAddressArea.setText(tenant.getPermanentAddress());

        // Format dates for display
        leaseStartDateField.setText(tenant.getLeaseStartDate() != null ? tenant.getLeaseStartDate().format(DATE_FORMATTER) : "");
        leaseEndDateField.setText(tenant.getLeaseEndDate() != null ? tenant.getLeaseEndDate().format(DATE_FORMATTER) : "");

        securityDepositField.setText(tenant.getSecurityDepositAmount() != null ? tenant.getSecurityDepositAmount().toPlainString() : "0.00");
        depositStatusComboBox.setSelectedItem(tenant.getSecurityDepositStatus());
        
        // Set guardian name and emergency contact number
        guardianNameField.setText(tenant.getGuardianName() != null ? tenant.getGuardianName() : "");
        emergencyContactNoField.setText(tenant.getEmergencyContactNumber() != null ? tenant.getEmergencyContactNumber() : "");

        // Select items in ComboBoxes (requires models to be populated first)
        selectComboBoxItemById(roomComboBox, tenant.getRoomId());

        // Select previously chosen User Account
        selectComboBoxItemById(userComboBox, tenant.getUserId());
    }

    public Tenant getTenantData() {
        // Basic Validation
        if (firstNameField.getText().trim().isEmpty() || lastNameField.getText().trim().isEmpty()
                || emailField.getText().trim().isEmpty() || phoneField.getText().trim().isEmpty()) {
            displayErrorMessage("First Name, Last Name, Email, and Phone Number are required.");
            return null;
        }

        Tenant tenant = (currentTenant != null) ? currentTenant : new Tenant(); // Use existing if editing

        tenant.setFirstName(firstNameField.getText().trim());
        tenant.setLastName(lastNameField.getText().trim());
        tenant.setStudentIdNumber(studentIdField.getText().trim().isEmpty() ? null : studentIdField.getText().trim());
        tenant.setEmail(emailField.getText().trim());
        tenant.setPhoneNumber(phoneField.getText().trim());
        tenant.setPermanentAddress(permanentAddressArea.getText().trim().isEmpty() ? null : permanentAddressArea.getText().trim());

        // Set guardian name and emergency contact number
        tenant.setGuardianName(guardianNameField.getText().trim().isEmpty() ? null : guardianNameField.getText().trim());
        tenant.setEmergencyContactNumber(emergencyContactNoField.getText().trim().isEmpty() ? null : emergencyContactNoField.getText().trim());

        // Parse dates
        try {
            tenant.setLeaseStartDate(leaseStartDateField.getText().trim().isEmpty() ? null : LocalDate.parse(leaseStartDateField.getText().trim(), DATE_FORMATTER));
            tenant.setLeaseEndDate(leaseEndDateField.getText().trim().isEmpty() ? null : LocalDate.parse(leaseEndDateField.getText().trim(), DATE_FORMATTER));
        } catch (DateTimeParseException e) {
            displayErrorMessage("Invalid date format. Please use YYYY-MM-DD.");
            return null;
        }

        // Parse deposit amount
        try {
            tenant.setSecurityDepositAmount(new BigDecimal(securityDepositField.getText().trim().isEmpty() ? "0" : securityDepositField.getText().trim()));
        } catch (NumberFormatException e) {
            displayErrorMessage("Invalid Security Deposit amount. Please enter a valid number.");
            return null;
        }
        tenant.setSecurityDepositStatus((Tenant.DepositStatus) depositStatusComboBox.getSelectedItem());

        // Get selected IDs from ComboBoxes
        tenant.setRoomId(getSelectedIdFromComboBox(roomComboBox));
 
        // Read selected User Account
        tenant.setUserId(getSelectedIdFromComboBox(userComboBox));

        return tenant;
    }

    public void setRoomComboBoxModel(List<Room> rooms) {
        // Filter rooms to only show available ones (not occupied or with available slots > 0)
        List<Room> availableRooms = rooms.stream()
                .filter(room -> room.getSlotsAvailable() > 0 && 
                       room.getStatus() != Room.RoomStatus.OCCUPIED &&
                       room.isActive())
                .collect(java.util.stream.Collectors.toList());
        
        // For editing a tenant, we need to include their current room even if it's otherwise full
        if (currentTenant != null && currentTenant.getRoomId() != null) {
            // Find the tenant's current room if it exists in the original list but not in available rooms
            rooms.stream()
                    .filter(room -> room.getRoomId() == currentTenant.getRoomId())
                    .filter(room -> availableRooms.stream().noneMatch(ar -> ar.getRoomId() == room.getRoomId()))
                    .findFirst()
                    .ifPresent(availableRooms::add);
        }
        
        // Populate the combobox with the filtered list
        populateComboBox(roomComboBox, availableRooms, "Select Room...",
                room -> room.getRoomId(),
                room -> room.getRoomNumber() + " (" + room.getSlotsAvailable() + " slots available)");
        
        // Reselect current tenant's room if editing
        if (currentTenant != null) {
            selectComboBoxItemById(roomComboBox, currentTenant.getRoomId());
        }
    }

    public void setUserComboBoxModel(List<User> users, User currentUser) {
        Vector<ComboBoxItem<Integer>> model = new Vector<>();
        model.add(new ComboBoxItem<>(null, "Select User Account..."));
        
        // Filter out current user, landlords, and admins
        for (User u : users) {
            // Only include TENANT role users who are not the current user
            if (u.getRole() == User.Role.TENANT && 
                (currentUser == null || u.getUserId() != currentUser.getUserId())) {
                model.add(new ComboBoxItem<>(u.getUserId(), u.getEmail()));
            }
        }
        
        userComboBox.setModel(new DefaultComboBoxModel<>(model));
        // If editing, pre-select current
        if (currentTenant != null) {
            selectComboBoxItemById(userComboBox, currentTenant.getUserId());
        }
    }

    // --- Generic Helper for Populating ComboBoxes ---
    private <T> void populateComboBox(JComboBox<ComboBoxItem<Integer>> comboBox, List<T> items, String prompt,
            java.util.function.Function<T, Integer> idExtractor,
            java.util.function.Function<T, String> displayExtractor) {
        Vector<ComboBoxItem<Integer>> model = new Vector<>();
        model.add(new ComboBoxItem<>(null, prompt)); // Add prompt item with null ID
        if (items != null) {
            for (T item : items) {
                model.add(new ComboBoxItem<>(idExtractor.apply(item), displayExtractor.apply(item)));
            }
        }
        comboBox.setModel(new DefaultComboBoxModel<>(model));
    }

    // --- Generic Helper for Selecting ComboBox Item by ID ---
    private void selectComboBoxItemById(JComboBox<?> comboBox, Integer idToSelect) {
        if (idToSelect == null) {
            comboBox.setSelectedIndex(0); // Select the prompt ("Select...")
            return;
        }
        
        try {
            // Check if the comboBox has been populated with ComboBoxItem objects
            if (comboBox.getItemCount() > 0) {
                Object item = comboBox.getItemAt(0);
                if (!(item instanceof ComboBoxItem)) {
                    return; // ComboBox hasn't been populated with proper models yet
                }
            }
            
            for (int i = 0; i < comboBox.getItemCount(); i++) {
                Object item = comboBox.getItemAt(i);
                if (item instanceof ComboBoxItem) {
                    ComboBoxItem<Integer> comboItem = (ComboBoxItem<Integer>) item;
                    if (comboItem != null && idToSelect.equals(comboItem.getId())) {
                        comboBox.setSelectedIndex(i);
                        return;
                    }
                }
            }
            comboBox.setSelectedIndex(0); // Default to prompt if ID not found
        } catch (Exception e) {
            // Log exception or just silently handle it
            System.out.println("Error selecting item by ID: " + e.getMessage());
            comboBox.setSelectedIndex(0); // Default to first item on error
        }
    }

    // --- Generic Helper for Getting Selected ID from ComboBox ---
    private Integer getSelectedIdFromComboBox(JComboBox<ComboBoxItem<Integer>> comboBox) {
        ComboBoxItem<Integer> selected = (ComboBoxItem<Integer>) comboBox.getSelectedItem();
        return (selected != null) ? selected.getId() : null;
    }

    /**
     * Clears all form fields to their default state.
     */
    public void clearForm() {
        firstNameField.setText("");
        lastNameField.setText("");
        studentIdField.setText("");
        emailField.setText("");
        phoneField.setText("");
        permanentAddressArea.setText("");
        leaseStartDateField.setText("");
        leaseEndDateField.setText("");
        securityDepositField.setText("0.00");
        depositStatusComboBox.setSelectedIndex(0); // Select default status
        roomComboBox.setSelectedIndex(0); // Select prompt

        userComboBox.setSelectedIndex(0); // Reset User Account dropdown
        firstNameField.requestFocusInWindow(); // Set focus
    }

    /**
     * Adds an ActionListener to the Save/Update button.
     *
     * @param listener ActionListener provided by the controller.
     */
    public void addSaveButtonListener(ActionListener listener) {
        saveButton.addActionListener(listener);
    }

    /**
     * Adds an ActionListener to the Cancel button.
     *
     * @param listener ActionListener provided by the controller.
     */
    public void addCancelButtonListener(ActionListener listener) {
        cancelButton.addActionListener(listener);
    }

    /**
     * Makes the dialog visible. Resets the saved flag.
     */
    public void showDialog() {
        this.saved = false; // Reset save flag each time dialog is shown
        setVisible(true);
    }

    /**
     * Hides and disposes of the dialog window.
     */
    public void closeDialog() {
        dispose();
    }

    /**
     * Sets the flag indicating the save button was clicked. Typically called by
     * the controller after successful save.
     */
    public void setSaved(boolean saved) {
        this.saved = saved;
    }

    /**
     * Checks if the Save button was clicked before the dialog was closed.
     *
     * @return true if Save was clicked, false otherwise.
     */
    public boolean isSaved() {
        return saved;
    }

    // --- Utility Methods ---
    public void displayErrorMessage(String message) {
        JOptionPane.showMessageDialog(this, message, "Validation Error", JOptionPane.ERROR_MESSAGE);
    }

    // --- Helper Class for ComboBox Items ---
    // Allows storing both an ID (Integer) and a display String in the ComboBox
    private static class ComboBoxItem<T> {

        private final T id;
        private final String displayValue;

        public ComboBoxItem(T id, String displayValue) {
            this.id = id;
            this.displayValue = displayValue;
        }

        public T getId() {
            return id;
        }

        @Override
        public String toString() {
            return displayValue; // This is what's shown in the ComboBox
        }

        // Optional: equals/hashCode if needed for model comparisons
        @Override
        public boolean equals(Object o) {
            if (this == o) {
                return true;
            }
            if (o == null || getClass() != o.getClass()) {
                return false;
            }
            ComboBoxItem<?> that = (ComboBoxItem<?>) o;
            return java.util.Objects.equals(id, that.id);
        }

        @Override
        public int hashCode() {
            return java.util.Objects.hash(id);
        }
    }

    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        mainPanel = new javax.swing.JPanel();
        titleLabel = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        personalInfoLabel = new javax.swing.JLabel();
        firstNameLabel = new javax.swing.JLabel();
        firstNameField = new javax.swing.JTextField();
        lastNameField = new javax.swing.JTextField();
        lastNameLabel = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        studentIdField = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        emailField = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        phoneField = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        permanentAddressArea = new javax.swing.JTextArea();
        jLabel10 = new javax.swing.JLabel();
        leaseStartDateField = new javax.swing.JFormattedTextField();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        leaseEndDateField = new javax.swing.JFormattedTextField();
        securityDepositField = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        depositStatusComboBox = new javax.swing.JComboBox();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        roomComboBox = new javax.swing.JComboBox();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        saveButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        jLabel19 = new javax.swing.JLabel();
        userComboBox = new javax.swing.JComboBox();
        emergencyContactNoField = new javax.swing.JTextField();
        guardianNameField = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(466, 700));
        setResizable(false);

        mainPanel.setBackground(new java.awt.Color(255, 255, 255));
        mainPanel.setPreferredSize(new java.awt.Dimension(415, 866));
        mainPanel.setRequestFocusEnabled(false);

        titleLabel.setFont(new java.awt.Font("Segoe UI Semibold", 0, 23)); // NOI18N
        titleLabel.setText("Add New Tenant");

        personalInfoLabel.setFont(new java.awt.Font("Segoe UI Semibold", 0, 14)); // NOI18N
        personalInfoLabel.setText("Personal Information");

        firstNameLabel.setText("First Name");

        lastNameLabel.setText("Last Name");

        jLabel5.setText("Student Number/ID");

        jLabel6.setFont(new java.awt.Font("Segoe UI Semibold", 0, 14)); // NOI18N
        jLabel6.setText("Contact Information");

        jLabel7.setText("Email");

        jLabel8.setText("Phone Number");

        jLabel9.setText("Permanent Address");

        permanentAddressArea.setColumns(20);
        permanentAddressArea.setRows(5);
        jScrollPane1.setViewportView(permanentAddressArea);

        jLabel10.setFont(new java.awt.Font("Segoe UI Semibold", 0, 14)); // NOI18N
        jLabel10.setText("Lease & Financial Details");

        jLabel11.setText("Lease Start Date");

        jLabel12.setText("Lease End Date");

        jLabel13.setText("Security Deposit");

        depositStatusComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Paid", "Pending" }));
        depositStatusComboBox.setDoubleBuffered(true);

        jLabel14.setText("Deposit Status");

        jLabel15.setFont(new java.awt.Font("Segoe UI Semibold", 0, 14)); // NOI18N
        jLabel15.setText("Assignments & Links");

        jLabel16.setText("Assign Room");

        roomComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Paid", "Pending" }));

        jLabel17.setText("Guardian Name");

        jLabel18.setText("Emergency Contact No.");

        saveButton.setBackground(new java.awt.Color(51, 204, 255));
        saveButton.setFont(new java.awt.Font("Segoe UI Semibold", 0, 12)); // NOI18N
        saveButton.setForeground(new java.awt.Color(255, 255, 255));
        saveButton.setText("Publish");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        cancelButton.setFont(new java.awt.Font("Segoe UI Semibold", 0, 12)); // NOI18N
        cancelButton.setForeground(new java.awt.Color(102, 102, 102));
        cancelButton.setText("Cancel");
        cancelButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        jLabel19.setText("User Account");

        userComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select contact" }));
        userComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                userComboBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(titleLabel))
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 410, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(personalInfoLabel))
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(firstNameLabel)
                .addGap(157, 157, 157)
                .addComponent(lastNameLabel))
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(firstNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(lastNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jLabel5))
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(studentIdField, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jLabel6))
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jLabel7)
                .addGap(185, 185, 185)
                .addComponent(jLabel8))
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(emailField, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(phoneField, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jLabel9))
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 410, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jLabel10))
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jLabel11)
                .addGap(49, 49, 49)
                .addComponent(jLabel12)
                .addGap(62, 62, 62)
                .addComponent(jLabel13))
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(leaseStartDateField, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(leaseEndDateField, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(securityDepositField, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jLabel14))
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(depositStatusComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jLabel15))
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jLabel16)
                .addGap(64, 64, 64)
                .addComponent(jLabel17)
                .addGap(67, 67, 67)
                .addComponent(jLabel18))
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(roomComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(guardianNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(emergencyContactNoField, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jLabel19))
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(userComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addGap(226, 226, 226)
                .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(saveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(titleLabel)
                .addGap(6, 6, 6)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6)
                .addComponent(personalInfoLabel)
                .addGap(18, 18, 18)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(firstNameLabel)
                    .addComponent(lastNameLabel))
                .addGap(6, 6, 6)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(firstNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lastNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel5)
                .addGap(6, 6, 6)
                .addComponent(studentIdField, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addComponent(jLabel6)
                .addGap(12, 12, 12)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addComponent(jLabel8))
                .addGap(6, 6, 6)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(emailField, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(phoneField, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel9)
                .addGap(6, 6, 6)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel10)
                .addGap(18, 18, 18)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel11)
                    .addComponent(jLabel12)
                    .addComponent(jLabel13))
                .addGap(5, 5, 5)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(securityDepositField, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(leaseStartDateField, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(leaseEndDateField, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(17, 17, 17)
                .addComponent(jLabel14)
                .addGap(12, 12, 12)
                .addComponent(depositStatusComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(jLabel15)
                .addGap(9, 9, 9)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(jLabel16))
                    .addComponent(jLabel17)
                    .addComponent(jLabel18))
                .addGap(6, 6, 6)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(roomComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(guardianNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(emergencyContactNoField, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addComponent(jLabel19)
                .addGap(6, 6, 6)
                .addComponent(userComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(saveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        jScrollPane2.setViewportView(mainPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 461, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 856, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_saveButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void userComboBoxActionPerformed(java.awt.event.ActionEvent evt) {                                                 
        // TODO add your handling code here:
    } 
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TenantFormDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TenantFormDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TenantFormDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TenantFormDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                TenantFormDialog dialog = new TenantFormDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JComboBox depositStatusComboBox;
    private javax.swing.JTextField emailField;
    private javax.swing.JTextField emergencyContactNoField;
    private javax.swing.JTextField firstNameField;
    private javax.swing.JLabel firstNameLabel;
    private javax.swing.JTextField guardianNameField;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextField lastNameField;
    private javax.swing.JLabel lastNameLabel;
    private javax.swing.JFormattedTextField leaseEndDateField;
    private javax.swing.JFormattedTextField leaseStartDateField;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JTextArea permanentAddressArea;
    private javax.swing.JLabel personalInfoLabel;
    private javax.swing.JTextField phoneField;
    private javax.swing.JComboBox roomComboBox;
    private javax.swing.JButton saveButton;
    private javax.swing.JTextField securityDepositField;
    private javax.swing.JTextField studentIdField;
    private javax.swing.JLabel titleLabel;
    private javax.swing.JComboBox userComboBox;
    // End of variables declaration//GEN-END:variables
}
